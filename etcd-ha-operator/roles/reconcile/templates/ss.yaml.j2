apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ etcd_cluster_name }}
  namespace: {{ etcd_namespace }}
  labels:
    etcd_cluster: {{ etcd_cluster_name }}
    app: {{ etcd_app_label }}
{% if not labels =={} %}
    {{ labels | to_nice_yaml | indent(width=4) }}
{% endif %}
spec:
  serviceName: {{ etcd_cluster_name }}
  # changing replicas value will require a manual etcdctl member remove/add
  # command (remove before decreasing and add after increasing)
  replicas: {{ size }}
  #  updateStrategy:
  #    type: "RollingUpdate"
  #    rollingUpdate:
  #      partition: 3
  selector:
    matchLabels:
      etcd_cluster: {{ etcd_cluster_name }}
      app: {{ etcd_app_label }}
{% if not labels =={} %}
      {{ labels | to_nice_yaml | indent(width=6) }}
{% endif %}
  template:
    metadata:
      name: {{ etcd_cluster_name }}
      labels:
        etcd_cluster: {{ etcd_cluster_name }}
        app: {{ etcd_app_label }}
{% if not labels =={} %}
        {{ labels | to_nice_yaml | indent(width=8) }}
{% endif %}
{% if not pod_annotations =={} %}
      annotations:
        {{ pod_annotations | to_nice_yaml | indent(width=8) }}
{% endif %}
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
{% if not image_pull_secret =="" %}
      imagePullSecrets:
      - name: {{image_pull_secret}}
{% endif %}
{% if not affinity=={} %}
      affinity:
        {{ affinity | to_nice_yaml | indent(width=8) }}
{% endif %}
      nodeSelector:
        {{ node_selector | to_nice_yaml | indent(width=8) }}
      containers:
      - name: "etcd"
        imagePullPolicy: Always
        image: {{ image }}
        resources:
          requests:
            cpu: {{etcdResources.requests.cpu}}
            memory:  {{etcdResources.requests.memory}}
          limits:
            cpu:  {{etcdResources.limits.cpu}}
            memory: {{etcdResources.limits.memory}}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
        readinessProbe:
          exec:
            command:
              - /bin/sh
              - -ec
              - "netstat -tulpn | grep 2379"
          failureThreshold: {{ etcdReadinessProbe.failureThreshold }}
          initialDelaySeconds: {{ etcdReadinessProbe.initialDelaySeconds }}
          periodSeconds: {{ etcdReadinessProbe.periodSeconds }}
          successThreshold: {{ etcdReadinessProbe.successThreshold }}
          timeoutSeconds: {{ etcdReadinessProbe.timeoutSeconds }}
        livenessProbe:
          exec:
            command:
              - /bin/sh
              - -ec
              - ETCDCTL_API=3 etcdctl $(if [ ${SECURE_CLIENT+x} ]; then echo "--endpoints=https://$(hostname).${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local:2379  --cert=/etc/etcdtls/operator/etcd-tls/etcd-client.crt --key=/etc/etcdtls/operator/etcd-tls/etcd-client.key --cacert=/etc/etcdtls/operator/etcd-tls/etcd-client-ca.crt"; fi) --command-timeout={{ etcdLivenessProbe.timeoutSeconds }}s endpoint status
          failureThreshold: {{ etcdLivenessProbe.failureThreshold }}
          initialDelaySeconds: {{ etcdLivenessProbe.initialDelaySeconds }}
          periodSeconds: {{ etcdLivenessProbe.periodSeconds }}
          successThreshold: {{ etcdLivenessProbe.successThreshold }}
          timeoutSeconds: {{ etcdLivenessProbe.timeoutSeconds }}
        ports:
        - containerPort: 2379
          name: client
        - containerPort: 2380
          name: peer
        env:
        - name: INITIAL_CLUSTER_SIZE
          value: "{{ initial_size | default(size)}}"
        - name: CLUSTER_NAME
          value: "{{ etcd_cluster_name }}"
        - name: ETCDCTL_API
          value: "3"
{% if etcdctlDialTimeout is defined and etcdctlDialTimeout %}
        - name: ETCDCTL_DIAL_TIMEOUT
          value: "{{ etcdctlDialTimeout }}"
{% endif %}
{% if etcd_secure_peer == "present" %}
        - name: "SECURE_PEER"
          value: "true"
{% endif %}
{% if etcd_secure_client == "present" %}
        - name: "SECURE_SERVER"
          value: "true"
        - name: "SECURE_CLIENT"
          value: "true"
{% endif %}
        - name: "ENABLE_CLIENT_CERT_AUTH"
          value: "{{ enable_client_cert_auth }}"
{% if enable_auth %}
        - name: USERNAME
          value: "root"
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ auth_secret_name_to_bound }}"
              key: password
        - name: ETCDCTL_USER
          value: "$(USERNAME):$(PASSWORD)"
{% endif %}
{% if etcdMaxThreads is defined and etcdMaxThreads %}
        - name: GOMAXPROCS
          value: "{{ etcdMaxThreads }}"
{% endif %}
{% if autoCompaction is defined and autoCompaction %}
{% if 'retention' in autoCompaction %}
        - name: ETCD_AUTO_COMPACTION_RETENTION
          value: "{{ autoCompaction.retention }}"
{% endif %}
{% if 'mode' in autoCompaction %}
        - name: ETCD_AUTO_COMPACTION_MODE
          value: "{{ autoCompaction.mode }}"
{% endif %}
{% endif %}
{% if etcdElectionTimeout is defined and etcdElectionTimeout %}
        - name: ETCD_ELECTION_TIMEOUT
          value: "{{ etcdElectionTimeout }}"
{% endif %}
{% if etcdHeartbeatInterval is defined and etcdHeartbeatInterval %}
        - name: ETCD_HEARTBEAT_INTERVAL
          value: "{{ etcdHeartbeatInterval }}"
{% endif %}
        volumeMounts:
        - name: data
          mountPath: /var/run/etcd
{% if etcd_secure_peer == "present" %}
        - name: "member-peer-tls"
          mountPath: /etc/etcdtls/member/peer-tls
{% endif %}
{% if etcd_secure_client == "present" %}
        - name: "member-server-tls"
          mountPath: /etc/etcdtls/member/server-tls
        - name: "etcd-client-tls"
          mountPath: /etc/etcdtls/operator/etcd-tls
{% endif %}

        command:
        - "/bin/sh"
        - "-ecx"
        - |
          HOSTNAME=$(hostname)
          if [ -f /tmp/run.sh ]; then
            /tmp/run.sh
          fi
          eps() {
              EPS=""
              for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                  EPS="${EPS}${EPS:+,}http$(if [ ${SECURE_CLIENT+x} ]; then echo "s"; fi)://${CLUSTER_NAME}-${i}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local:2379"
              done
              echo ${EPS}
          }
          # store member id into PVC for later member replacement
          collect_member() {
              export ETCDCTL_ENDPOINTS=$(eps)
              while ! etcdctl $(if [ ${SECURE_CLIENT+x} ]; then echo "--cert=/etc/etcdtls/operator/etcd-tls/etcd-client.crt --key=/etc/etcdtls/operator/etcd-tls/etcd-client.key --cacert=/etc/etcdtls/operator/etcd-tls/etcd-client-ca.crt"; fi) member list &>/dev/null; do sleep 1; done
              while [ ! -s '/var/run/etcd/member_id' ];
              do
                etcdctl $(if [ ${SECURE_CLIENT+x} ]; then echo "--cert=/etc/etcdtls/operator/etcd-tls/etcd-client.crt --key=/etc/etcdtls/operator/etcd-tls/etcd-client.key --cacert=/etc/etcdtls/operator/etcd-tls/etcd-client-ca.crt"; fi) member list | grep ${HOSTNAME}.${CLUSTER_NAME}.*:2380 | cut -d',' -f1 > /var/run/etcd/member_id;
                sleep 1;
              done
              exit 0
          }
          member_hash() {
              etcdctl $(if [ ${SECURE_CLIENT+x} ]; then echo "--cert=/etc/etcdtls/operator/etcd-tls/etcd-client.crt --key=/etc/etcdtls/operator/etcd-tls/etcd-client.key --cacert=/etc/etcdtls/operator/etcd-tls/etcd-client-ca.crt"; fi) member list | grep ${HOSTNAME}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local:2380 | cut -d',' -f1
          }
          # we should wait for other pods to be up before trying to join
          # otherwise we got "no such host" errors when trying to resolve other members
          SET_ID=${HOSTNAME##*[^0-9]}
          for i in $(seq 0 $((${SET_ID}))); do
              while true; do
                  echo "Waiting for ${CLUSTER_NAME}-${i}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local to come up"
                  nslookup ${CLUSTER_NAME}-${i}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local > /dev/null && break
                  sleep 1s
              done
          done
          # etcd-SET_ID
          SET_ID=${HOSTNAME##*[^0-9]}
          # adding a new member to existing cluster (assuming all initial pods are available)
          if [[ ${SET_ID} -ge ${INITIAL_CLUSTER_SIZE} ]]; then
            export ETCDCTL_ENDPOINTS=$(eps)
            # member already added?
            MEMBER_HASH=$(member_hash)
            if [ -n "${MEMBER_HASH}" ]; then
                # the member hash exists but for some reason etcd failed
                # as the datadir has not be created, we can remove the member
                # and retrieve new hash
                etcdctl $(if [ ${SECURE_CLIENT+x} ]; then echo "--cert=/etc/etcdtls/operator/etcd-tls/etcd-client.crt --key=/etc/etcdtls/operator/etcd-tls/etcd-client.key --cacert=/etc/etcdtls/operator/etcd-tls/etcd-client-ca.crt"; fi) member remove ${MEMBER_HASH}
            fi
            echo "Adding new member"
            etcdctl $(if [ ${SECURE_CLIENT+x} ]; then echo "--cert=/etc/etcdtls/operator/etcd-tls/etcd-client.crt --key=/etc/etcdtls/operator/etcd-tls/etcd-client.key --cacert=/etc/etcdtls/operator/etcd-tls/etcd-client-ca.crt"; fi) member add ${HOSTNAME} --peer-urls http$(if [ ${SECURE_PEER+x} ]; then echo "s"; fi)://${HOSTNAME}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local:2380 | grep "^ETCD_" > /var/run/etcd/new_member_envs
            if [ $? -ne 0 ]; then
                echo "Exiting"
                rm -f /var/run/etcd/new_member_envs
                exit 1
            fi
            sleep 1
            cat /var/run/etcd/new_member_envs
            source /var/run/etcd/new_member_envs
            collect_member &
            exec etcd --name ${HOSTNAME} \
                --listen-peer-urls http$(if [ ${SECURE_PEER+x} ]; then echo "s"; fi)://0.0.0.0:2380 \
                --listen-client-urls http$(if [ ${SECURE_CLIENT+x} ]; then echo "s"; fi)://0.0.0.0:2379 \
                --advertise-client-urls http$(if [ ${SECURE_CLIENT+x} ]; then echo "s"; fi)://${HOSTNAME}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local:2379 \
                --data-dir /var/run/etcd/default.etcd \
                --initial-advertise-peer-urls http$(if [ ${SECURE_PEER+x} ]; then echo "s"; fi)://${HOSTNAME}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local:2380 \
                --initial-cluster ${ETCD_INITIAL_CLUSTER} \
                --initial-cluster-state ${ETCD_INITIAL_CLUSTER_STATE} \
                $(if [ ${SECURE_PEER+x} ]; then
                  echo "--peer-client-cert-auth=true --peer-trusted-ca-file=/etc/etcdtls/member/peer-tls/peer-ca.crt --peer-cert-file=/etc/etcdtls/member/peer-tls/peer.crt --peer-key-file=/etc/etcdtls/member/peer-tls/peer.key";
                fi) \
                $(if [ ${SECURE_SERVER+x} ]; then
                  echo "--client-cert-auth=${ENABLE_CLIENT_CERT_AUTH} --cert-file=/etc/etcdtls/member/server-tls/server.crt --key-file=/etc/etcdtls/member/server-tls/server.key";
                fi) \
                $(if [[ "${ENABLE_CLIENT_CERT_AUTH}" == "true" ]]; then
                  echo "--trusted-ca-file=/etc/etcdtls/member/server-tls/server-ca.crt";
                fi)
          fi
          # re-joining after failure?
           if [[ -e /var/run/etcd/member_id ]]; then
               echo "Re-joining etcd member"
               member_id=$(cat /var/run/etcd/member_id)
               if [ -z "$member_id" ]
                 then
                       rm /var/run/etcd/member_id
                       while [ -e /var/run/etcd/member_id ]; do sleep 1; done
                       exit 1
                 fi
               # re-join member
               ETCDCTL_ENDPOINTS=$(eps) etcdctl member update ${member_id} http$(if [ ${SECURE_PEER+x} ]; then echo "s"; fi)://${HOSTNAME}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local:2380 | true
               sleep 1
               exec etcd --name ${HOSTNAME} \
                   --listen-peer-urls http$(if [ ${SECURE_PEER+x} ]; then echo "s"; fi)://0.0.0.0:2380 \
                   --listen-client-urls http$(if [ ${SECURE_CLIENT+x} ]; then echo "s"; fi)://0.0.0.0:2379\
                   --advertise-client-urls http$(if [ ${SECURE_CLIENT+x} ]; then echo "s"; fi)://${HOSTNAME}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local:2379 \
                   --data-dir /var/run/etcd/default.etcd \
                  $(if [ ${SECURE_PEER+x} ]; then
                    echo "--peer-client-cert-auth=true --peer-trusted-ca-file=/etc/etcdtls/member/peer-tls/peer-ca.crt --peer-cert-file=/etc/etcdtls/member/peer-tls/peer.crt --peer-key-file=/etc/etcdtls/member/peer-tls/peer.key";
                  fi) \
                  $(if [ ${SECURE_SERVER+x} ]; then
                    echo "--client-cert-auth=${ENABLE_CLIENT_CERT_AUTH} --cert-file=/etc/etcdtls/member/server-tls/server.crt --key-file=/etc/etcdtls/member/server-tls/server.key";
                  fi) \
                  $(if [[ "${ENABLE_CLIENT_CERT_AUTH}" == "true" ]]; then
                    echo "--trusted-ca-file=/etc/etcdtls/member/server-tls/server-ca.crt";
                  fi)
           fi
          PEERS=""
          for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
              PEERS="${PEERS}${PEERS:+,}${CLUSTER_NAME}-${i}=http$(if [ ${SECURE_PEER+x} ]; then echo "s"; fi)://${CLUSTER_NAME}-${i}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local:2380"
          done
          collect_member &
          # join member
          exec etcd --name ${HOSTNAME} \
              --initial-advertise-peer-urls http$(if [ ${SECURE_PEER+x} ]; then echo "s"; fi)://${HOSTNAME}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local:2380 \
              --listen-peer-urls http$(if [ ${SECURE_PEER+x} ]; then echo "s"; fi)://0.0.0.0:2380 \
              --listen-client-urls http$(if [ ${SECURE_CLIENT+x} ]; then echo "s"; fi)://0.0.0.0:2379 \
              --advertise-client-urls http$(if [ ${SECURE_CLIENT+x} ]; then echo "s"; fi)://${HOSTNAME}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local:2379 \
              --initial-cluster-token {{ etcd_cluster_name }} \
              --initial-cluster ${PEERS} \
              --initial-cluster-state new \
              --data-dir /var/run/etcd/default.etcd \
              $(if [ ${SECURE_PEER+x} ]; then
                echo "--peer-client-cert-auth=true --peer-trusted-ca-file=/etc/etcdtls/member/peer-tls/peer-ca.crt --peer-cert-file=/etc/etcdtls/member/peer-tls/peer.crt --peer-key-file=/etc/etcdtls/member/peer-tls/peer.key";
              fi) \
              $(if [ ${SECURE_SERVER+x} ]; then
                echo "--client-cert-auth=${ENABLE_CLIENT_CERT_AUTH} --cert-file=/etc/etcdtls/member/server-tls/server.crt --key-file=/etc/etcdtls/member/server-tls/server.key";
              fi) \
              $(if [[ "${ENABLE_CLIENT_CERT_AUTH}" == "true" ]]; then
                echo "--trusted-ca-file=/etc/etcdtls/member/server-tls/server-ca.crt";
              fi)
      volumes:
{% if etcd_secure_peer == "present" %}
      - name: "member-peer-tls"
        secret:
          secretName: {{ _tls.static.member.peer_secret }}
          items:
          - key: tls.crt
            path: peer.crt
          - key: tls.key
            path: peer.key
          - key: ca.crt
            path: peer-ca.crt
{% endif %}
{% if etcd_secure_client == "present" %}
      - name: "member-server-tls"
        secret:
          secretName: {{ _tls.static.member.server_secret }}
          items:
          - key: tls.crt
            path: server.crt
          - key: tls.key
            path: server.key
          - key: ca.crt
            path: server-ca.crt
      - name: "etcd-client-tls"
        secret:
          secretName: {{ _tls.static.operator_secret }}
          items:
          - key: tls.crt
            path: etcd-client.crt
          - key: tls.key
            path: etcd-client.key
          - key: ca.crt
            path: etcd-client-ca.crt
{% endif %}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      storageClassName: {{ storage_class }}
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: {{ storage_size}}
