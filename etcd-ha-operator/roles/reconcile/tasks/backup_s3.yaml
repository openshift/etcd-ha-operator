---
- name: Exit if storage_type is not S3
  fail:
    msg: "Only S3 storage_type is supported"
  when: storage_type != "S3"

- name: Exit if bucket name is undefined
  fail:
    msg: "Bucket name is undefined"
  when: s_3.path is undefined

- name: Exit if aws secret is undefined
  fail:
    msg: "aws secret is undefined"
  when: s_3.aws_secret is undefined


- name: Lookup aws-secret
  set_fact:
    aws_secret: "{{ lookup('k8s', api_version='v1', kind='Secret', namespace='default', resource_name=s_3.aws_secret)}}"

- name: Decode credentials
  set_fact:
    aws_credentials: "{{ aws_secret.data.credentials | b64decode }}"
    aws_configuration: "{{ aws_secret.data.config | b64decode }}"
  when: aws_secret is defined and aws_secret.data is defined and
        aws_secret.data.config is defined and aws_secret.data.credentials is defined

- name: Create boto configuration file
  copy:
    dest: "/tmp/boto"
    mode: 0777
    content: "{{ aws_credentials }}"

- name: Set access id and key
  set_fact:
    aws_access_key_id: "{{ lookup('ini', 'aws_access_key_id section=default file=/tmp/boto') }}"
    aws_secret_access_key: "{{ lookup('ini', 'aws_secret_access_key section=default file=/tmp/boto') }}"
    aws_bucket: "{{ s_3.path.split('/')[0] }}"
    aws_object: "{{ s_3.path.split('/')[1:] | join('/') }}"
    local_file: "{{ '/tmp/' + meta.name + '.backup' }}"

- name: Get etcd host and port
  set_fact:
    etcd_host: "{{ etcd_endpoints.split('://')[1].split(':')[0] }}"
    etcd_port: "{{ etcd_endpoints.split('://')[1].split(':')[1]  }}"

- name: Create certs if TLS is enabled
  vars:
    tls_secret_name: "{{ client_tls_secret }}"
  include_tasks: create_certs.yaml
  when: client_tls_secret is defined

- name: Create etcd back when secure
  etcd_member:
    state: "present"
    type:  "backup"
    cluster_host: "{{ etcd_host }}"
    cluster_port: "{{ etcd_port }}"
    filename: "{{ local_file }}"
    ca_cert: "{{ tls_directory }}/etcd-ca.crt"
    cert_cert: "{{ tls_directory }}/etcd-client.crt"
    cert_key: "{{ tls_directory }}/etcd-client.key"
  when: client_tls_secret is defined

- name: Create etcd backup
  etcd_member:
    state: "present"
    type:  "backup"
    cluster_host: "{{ etcd_host }}"
    cluster_port: "{{ etcd_port }}"
    filename: "{{ local_file }}"
  when: client_tls_secret is undefined

- name: Upload data
  aws_s3:
    bucket: "{{ aws_bucket }}"
    object: "{{ aws_object }}"
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    src: "{{ local_file }}"
    mode: put
  when: aws_bucket is defined and aws_object is defined

- meta: end_play